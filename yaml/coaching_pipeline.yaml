---
trigger: none
pr: none
pool: Default

parameters:
- name: resourceRegion
  displayName: Resource Region
  type: string
  default: westeurope
- name: clientName
  displayName: Client Name
  type: string
- name: coachingPersons
  type: string
- name: stopVMSchedule
  displayName: Scheduled hour in Portugal Timezone to shutdown VMs. If no autoshutdown is desired please input NotDefined 
  type: string
  default: 6pm
  values:
    - 1am
    - 2am
    - 3am
    - 4am
    - 5am
    - 6am
    - 7am
    - 8am
    - 9am
    - 10am
    - 11am
    - 12am
    - 1pm
    - 2pm
    - 3pm
    - 4pm
    - 5pm
    - 6pm
    - 7pm
    - 8pm
    - 9pm
    - 10pm
    - 11pm
    - 12pm
    - NotDefined
- name: startVMSchedule
  displayName: Scheduled hour in Portugal Timezone to start VMs. If no autostart is desired please input NotDefined
  type: string
  default: 9am
  values:
    - 1am
    - 2am
    - 3am
    - 4am
    - 5am
    - 6am
    - 7am
    - 8am
    - 9am
    - 10am
    - 11am
    - 12am
    - 1pm
    - 2pm
    - 3pm
    - 4pm
    - 5pm
    - 6pm
    - 7pm
    - 8pm
    - 9pm
    - 10pm
    - 11pm
    - 12pm
    - NotDefined

resources:
  repositories:
  - repository: OutSystems/opscloud-opscoaching
    type: github
    endpoint: 'Coaching Infrastructure Provisioning'
    name: 'OutSystems/opscloud-opscoaching'

jobs:
- job: os_infra_bootup
  displayName: 'OutSystems Infra bootup'
  workspace:
    clean: all
  steps:

  - checkout: OutSystems/opscloud-opscoaching
    clean: true
    displayName: 'Checkout Infrastucture Scripts'
  

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'ospsopscloud'
      ScriptType: 'ps'
      scriptLocation: 'InlineScript'
      inlineScript: 'terraform init'
      workingDirectory: '$(System.DefaultWorkingDirectory)\terraform\'
    displayName: 'Init Terraform Script'


  - task: TerraformCLI@0
    inputs:
      command: 'apply'
      workingDirectory: '$(System.DefaultWorkingDirectory)\terraform\'
      environmentServiceName: 'ospsopscloud'
      commandOptions: '-auto-approve -var="client-name=${{ parameters.clientName }}" -var="location=${{ parameters.resourceRegion }}" -var="coaching-persons=${{ parameters.coachingPersons }}"'
      allowTelemetryCollection: false
    displayName: 'Run Terraform Script'
    


  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        if (${{ parameters.stopVMSchedule }} -ne 'NotDefined')
        {
          $action = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument '-Command "
          $vmNamesToBeShutDown = Get-AzVm -ResourceGroupName "${{ parameters.clientName }}-Coaching"
          foreach($vmName in $vmNamesToBeShutDown.name)
          {
            $resource = Get-AzResourceGroup "${{ parameters.clientName }}-Coaching"
            if($vmName -ne $null)
            {  
              Write-Output "Stopping virtual machine..." + $vmName
              Stop-AzVm -name $vmName -ResourceGroupName $resource.ResourceGroupName -StayProvisioned -Force
            }   
            else
            {
              Write-output "Virtual machines from Resource Group ${{ parameters.clientName }}-Coaching not found"
            }
          }"'
          $daysOfWeek = "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"
          $trigger = New-ScheduledTaskTrigger -Weekly -At ${{ parameters.stopVMSchedule }} -DaysOfWeek $daysOfWeek
          $sp = New-ScheduledTaskPrincipal -GroupId "NT AUTHORITY\SYSTEM" -RunLevel Highest
          $stset = New-ScheduledTaskSettingsSet
          $st = New-ScheduledTask -Action $action -Trigger $trigger -Principal $sp -Settings $stset
          Register-ScheduledTask '${{ parameters.clientName }}-Stop' -InputObject $st
        }
        
      workingDirectory: '$(System.DefaultWorkingDirectory)\terraform\'
    displayName: 'Stop VMs Scheduled Task'


  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        if (${{ parameters.startVMSchedule }} -ne 'NotDefined')
        {
          $action = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument '-Command "
          $vmNamesToBeStarted = Get-AzVM -ResourceGroupName "${{ parameters.clientName }}-Coaching"
          foreach($vmName in $vmNamesToBeStarted.name)
          {
            $resource = Get-AzResourceGroup -Name "${{ parameters.clientName }}-Coaching"
            if($vmName -ne $null)
            {  
                Write-Output "Starting virtual machine..." + $vmName
                Start-AzVM -Name $vmName -ResourceGroupName $resource.ResourceGroupName
            }   
            else
            {
                Write-output "Virtual machines from Resource Group ${{ parameters.clientName }}-Coaching not found"
            }
          }"'
          $daysOfWeek = "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"
          $trigger = New-ScheduledTaskTrigger -Weekly -At ${{ parameters.startVMSchedule }} -DaysOfWeek $daysOfWeek
          $sp = New-ScheduledTaskPrincipal -GroupId "NT AUTHORITY\SYSTEM" -RunLevel Highest
          $stset = New-ScheduledTaskSettingsSet
          $st = New-ScheduledTask -Action $action -Trigger $trigger -Principal $sp -Settings $stset
          Register-ScheduledTask '${{ parameters.clientName }}-Start' -InputObject $st
        }
        
      workingDirectory: '$(System.DefaultWorkingDirectory)\terraform\'
    displayName: 'Start VMs Scheduled Task'
...
